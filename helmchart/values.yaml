# Default values for helmchart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

##! Made a one-liner to substitute env values from .env into a helm values.yaml
##! Helm doesnt support env values in helm charts and felt like bad practice but it works
##!  (export $(sed "/^\$\|^#/d" .env | xargs); envsubst < helmchart/values.yaml)


replicaCount: 2

image:
  repository: registry.codeopensrc.com/kc/website/app
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
    - servicePort: 80
      targetContainerPortName: http

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}



### Custom additions

containerPorts: 
  - name: http
    port: 80
containerProbe:
  path: /healthcheck
  httpHeaders:
    - name: Host
      value: localhost

useStatefulSet: false

persistence:
  statefulset:
    volumeClaimTemplate:
      #name: dbclaim
      #helmResourcePolicy: "keep"
      accessModes: ["ReadWriteOnce"]
      volumeMode: Filesystem #Or "Block" (uncommon)
      storageClassName: "standard"
      resources:
        requests:
          storage: 1Gi
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Delete
      whenScaled: Delete
  deployment:
    enabled: false
    volumeTemplate:
      #name: logclaim
      #helmResourcePolicy: "keep"
      accessModes: ["ReadWriteOnce"]
      volumeMode: Filesystem #Or "Block" (uncommon)
      storageClassName: "standard"
      persistentVolumeReclaimPolicy: Delete
      resources:
        requests:
          storage: 1Gi
      persistentVolumeType:
        local:
          path: /data
      nodeAffinity:
        - key: kubernetes.io/hostname
          values:
            - minikube
  storageClasses:
  - name: local-storage
    #volumeBindingMode: WaitForFirstConsumer
    provisioner: "kubernetes.io/no-provisioner"
    parameters: []


volumeClaimMounts: []
#  - name: database
#    mountPath: /data/db
#    subPath: db

volumeMounts: []
#  - name: shared-logs
#    mountPath: /var/log
#    mountType: 
#      emptyDir: {}
#  - name: mongoconf
#    mountPath: /etc/mongo
#    mountType: 
#      configMap:
#        name: mongod.conf

lifecyclePostStartCommand: []
#  ["sh", "-c", "npm run reloader > /var/log/hotreload.log &"]


additionalContainers: []
#  - name: hotreload-logger
#    image: busybox
#    command: ["sh", "-c", 
#      "while [ ! -f /var/log/hotreload.log ]; do sleep 1; done; \
#       tail -f /var/log/hotreload.log"
#    ]
#    volumeMounts:
#      - name: shared-logs
#        mountPath: /var/log

## Can pass in .env using `--set-file dotEnvFile=.env`
dotEnvFile: ""

secretStringData:
  MONGO_DB_NAME: "mongo"
  BLOG_KEY: "secret_value"
  TOKEN_API_SELF_READ: "secret_value"

configMapData:
  CONSUL_SERVICE_NAME:  "website"
  CONSUL_HOST:          "172.17.0.1"
  REGISTER_SERVICE:     "false"
  AUTH_URL:             ""
  ##TODO:Update to DEV_DATABASE_URL_ORIGIN like react-template 
  DEV_DATABASE_URL:     "mongodb://mongodb-tmpdb:27017"
  GITLAB_API_URL:       ""
  #ENABLE_DB:           "false"



##! create* creates and does NOT auto attach to the deployment
##! attach* will NOT create but attach existing external resources to the deployment
##! createAndAttach* will create AND attach to the deployment
##! Using create* and attach* to create AND attach caused the lookup function
##!  to use the old values and require 2 deployments to correctly reflect the update.
##!  Thus the need for createAndAttach*.

createExtraSecrets: []
#  - name: extrasecret1
#    stringData:
#      SECRETK1: secret_val1

createExtraConfigMaps: []
#  - name: extracm1
#    data:
#      ENVK1: env_val1

##! attach* hash annotations will be static in `helm template` due to the lookup function
##! lookup() is used to update hashs for when any external cms/secrets change
##! https://helm.sh/docs/chart_template_guide/functions_and_pipelines/#using-the-lookup-function
attachExtraSecrets: []
#  - name: extrasecret1
attachExtraConfigMaps: []
#  - name: extracm1

##! Opens up these resources to possibly be consumed by other resources
##!  separately from configMapData and secretStringData
createAndAttachExtraConfigMaps: []
#  - name: extracm1
#    data:
#      ENVK1: env_val1

createAndAttachExtraSecrets: []
#  - name: extrasecret1
#    stringData:
#      SECRETK1: secret_val1

createFileConfigMaps:
#  - name: mongod.conf
#    content:
#      net:
#        port: 27017
#        bindIp: 0.0.0.0

ciLabels: {}
ciAnnotations: {}
